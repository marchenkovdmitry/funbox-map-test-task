{"version":3,"sources":["Components/Sortable/SortableItem/SortableItem.js","Components/Sortable/SortableList/SortableList.js","Components/Map/PointsMap.js","constants.js","Components/Forms/cityForm.js","App.js","serviceWorker.js","index.js"],"names":["SortableElement","value","children","className","SortableContainer","items","removeFunc","map","index","key","type","onClick","title","PointsMap","mapRef","changeStateFunc","query","apikey","defaultState","center","zoom","width","height","modules","onLoad","ymaps","state","instanceRef","ref","current","CityForm","validate","city","geocode","then","res","metaData","geocoder","found","err","console","error","validateOnChange","validateOnBlur","initialValues","onSubmit","resetForm","referencePoints","referer","errors","htmlFor","id","name","placeholder","App","useState","route","changeState","useRef","useEffect","geoObjects","remove","multiRoute","multiRouter","MultiRoute","editorMidPointsType","editorDrawOver","editor","start","model","events","add","wayPoints","getWayPoints","geocoders","each","point","geoObject","addon","balloon","get","coords","geometry","getCoordinates","push","description","properties","options","set","balloonContentLayout","templateLayoutFactory","createClass","Promise","all","values","reduce","acc","val","points","setCenter","length","addRoute","filter","removeCity","onSortEnd","oldIndex","newIndex","arrayMove","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1f67548a.chunk.js","sourcesContent":["import React from \"react\";\nimport {SortableElement} from \"react-sortable-hoc\";\nimport \"./styles.scss\";\n\nconst SortableItem = ({value, children}) => (\n    <li className=\"sortable-list-item\">\n        {value}\n        {children}\n    </li>\n);\n\nexport default SortableElement(SortableItem);","import React from \"react\";\nimport {SortableContainer} from \"react-sortable-hoc\";\nimport SortableItem from \"../SortableItem/SortableItem\";\nimport \"./styles.scss\";\n\nconst SortableList = ({items, removeFunc}) => (\n    <ul className=\"sortable-list\">\n        {items.map((value, index) => (\n            <SortableItem index={index} value={value} key={`item-${value}-${index}`}>\n                <button type={\"button\"} onClick={() => removeFunc(value)} title={`Удалить точку - ${value}`}>X</button>\n            </SortableItem>\n        ))}\n    </ul>\n);\n\nexport default SortableContainer(SortableList);","import React from \"react\";\nimport {Map, YMaps} from \"react-yandex-maps\";\nimport {API_KEY} from \"../../constants\";\n\nconst PointsMap = ({mapRef, changeStateFunc}) => (\n    <YMaps query={{apikey: API_KEY}}>\n        <Map\n            defaultState={{ center: [55.75, 37.57], zoom: 9 }}\n            width={700}\n            height={500}\n            modules={[\n                \"multiRouter.MultiRoute\",\n                \"multiRouter.EditorAddon\",\n                \"templateLayoutFactory\",\n                \"coordSystem.geo\",\n                \"geocode\",\n                \"util.bounds\",\n                \"geoObject.addon.balloon\"\n            ]}\n            onLoad={(ymaps) => {\n                changeStateFunc(state => ({\n                    ...state,\n                    ymaps\n                }));\n            }}\n            instanceRef={(ref) => {\n                if (ref) mapRef.current = ref;\n            }}\n        />\n    </YMaps>\n);\n\nexport default PointsMap;","export const API_KEY = '3b602e32-65d4-49cc-ab31-05d45edda876';","import React from \"react\";\nimport {Field, Form, Formik} from \"formik\";\nimport \"./styles.scss\";\n\nconst CityForm = ({ymaps, changeStateFunc}) => (\n    <Formik\n        validate={({city}) => {\n            return ymaps.geocode(city).then(res => {\n                    if (!res.metaData.geocoder.found) {\n                        return {\n                            city: 'Такого города нет. Попробуйте ввести другой.'\n                        }\n                    }\n                }, err => {\n                    console.error(err);\n                    return {\n                        city:  'Произошла непредвиденная ошибка, попробуйте еще раз.'\n                    }\n                }\n            );\n        }}\n        validateOnChange={false}\n        validateOnBlur={false}\n        initialValues={{city: \"\"}}\n        onSubmit={({city}, {resetForm}) => {\n            changeStateFunc(state => ({\n                ...state,\n                referencePoints: [...state.referencePoints, ...[city]],\n                referer: 'ui'\n            }));\n            resetForm();\n        }}\n    >\n        {({errors}) => (\n            <Form className=\"city-form\">\n                <div className=\"city-form__field\">\n                    <label htmlFor=\"city\">Город</label>\n                    <Field id={\"city\"} name=\"city\" type=\"text\" placeholder={\"Введите город и нажмите enter\"}/>\n                    {errors && <p className=\"city-form__error-message\">{errors.city}</p>}\n                </div>\n            </Form>\n        )}\n    </Formik>\n);\n\nexport default CityForm;","import React, {useEffect, useRef, useState} from \"react\";\nimport arrayMove from \"array-move\";\n\nimport SortableList from \"./Components/Sortable/SortableList/SortableList\";\nimport PointsMap from \"./Components/Map/PointsMap\";\nimport CityForm from \"./Components/Forms/cityForm\";\nimport \"./styles/styles.scss\"\n\nconst App = () => {\n    const [state, changeState] = useState({\n        referencePoints: [],\n        referer: 'ui',\n        ymaps: null,\n        route: null\n    });\n    const mapRef = useRef(null);\n    const {referencePoints, referer, ymaps, route} = state;\n\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        changeState(state => ({\n            ...state,\n            referencePoints: arrayMove(state.referencePoints, oldIndex, newIndex),\n            referer: 'ui'\n        }));\n    };\n\n    const addRoute = (ref, route, referencePoints) => {\n        if (ref.current) {\n            if (route) {\n                ref.current.geoObjects.remove(route);\n            }\n\n            const multiRoute = new ymaps.multiRouter.MultiRoute({\n                referencePoints\n            }, {\n                editorMidPointsType: 'via',\n                editorDrawOver: false,\n            });\n\n            multiRoute.editor.start();\n\n            multiRoute.model.events.add('requestsuccess', () => {\n                const wayPoints = multiRoute.getWayPoints();\n                let geocoders = [];\n\n\n                wayPoints.each(point => {\n                    ymaps.geoObject.addon.balloon.get(point);\n                    const coords = point.geometry.getCoordinates();\n\n                    const geocoder = ymaps.geocode(coords);\n                    geocoders.push(geocoder);\n\n                    geocoder.then(res => {\n                        const description = res.geoObjects.get(0).properties.get('description');\n\n                        point.options.set({\n                            balloonContentLayout: ymaps.templateLayoutFactory.createClass(description)\n                        });\n                    })\n                });\n\n                Promise.all(geocoders).then(values => {\n                    const {coords, points} = values.reduce((acc, val) => {\n                        const geoObject = val.geoObjects.get(0);\n                        const coords = geoObject.geometry.getCoordinates();\n                        const description = geoObject.properties.get('description');\n\n                        acc.coords.push(coords);\n                        acc.points.push(description);\n                        return acc;\n                    }, {coords: [], points: []});\n\n                    changeState(state => ({\n                        ...state,\n                        referencePoints: points,\n                        referer: 'map'\n                    }));\n\n                    ref.current.setCenter(coords[coords.length - 1]);\n                })\n            });\n\n            ref.current.geoObjects.add(multiRoute);\n\n            changeState(state => ({\n                ...state,\n                route: multiRoute\n            }));\n        }\n    };\n\n    const removeCity = value => {\n        changeState(state => ({\n            ...state,\n            referencePoints: state.referencePoints.filter(point => point !== value),\n            referer: 'ui'\n        }));\n    };\n\n    useEffect(() => {\n        if (referer === 'map') return;\n        addRoute(mapRef, route, referencePoints);\n    }, [referencePoints]);\n\n    return (\n        <>\n            <div className=\"scene\">\n                <div className=\"user-actions\">\n                    <CityForm ymaps={ymaps} changeStateFunc={changeState}/>\n                    <SortableList items={referencePoints} removeFunc={value => removeCity(value)} onSortEnd={onSortEnd}/>\n                </div>\n                <PointsMap mapRef={mapRef} changeStateFunc={changeState}/>\n            </div>\n        </>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}